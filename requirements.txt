 ** RoamIO-An-Indoor-Navigation-Robot **
=> Overview

This project is a robot navigation simulation/game built in Unity, supporting both 2D (grid-based) and 3D (indoor environment) modes. The robot navigates from a start position to a user-selected destination using the A* pathfinding algorithm, avoiding static and dynamic obstacles while maintaining smooth camera control.

=> Objectives

        Implement autonomous robot navigation.
        
        Provide 2D (top-down) and 3D (interior) environments.
        
        Use A* pathfinding with obstacle avoidance.
        
        Allow users to set destinations interactively.
        
        Implement smooth camera follow and transitions.

✅ Functional Requirements
        Core Navigation
        
                Robot moves from start → target location.
                
                Avoids static (walls, furniture) and dynamic (moving objects, people) obstacles.
                
                Smooth path-following (no corner cutting).
        
        Pathfinding
        
                A* algorithm on a grid.
                
                Each node stores: walkability, cost values (G, H, F).
                
                Path recalculates if:
                
                User selects new target.
                
                Dynamic obstacle blocks the path.
        
        User Interaction
        
                Click/tap to set robot destination.
                
                Visual marker shows target location.
                
                Robot auto-navigates to destination.
        
        Camera
        
                Overhead Mode: Initial position (0,70,0), rotation (90,0,0).
                
                Follow Mode: Camera follows robot in motion.
                
                Return Mode: Returns to overhead when robot stops.
        
        Obstacles
        
                Static: Walls, doors, furniture.
                
                Dynamic: Moving NPCs, robots, doors opening/closing.
                
                Real-time grid updates for dynamic changes.
        
        Environments
        
           2D Mode:
        
                Top-down grid map.
                
                Sprites for robot and obstacles.
                
                3D Mode:
                
                Indoor scene with rooms, walls, doors.
                
                3D robot and furniture models.

=> Non-Functional Requirements

        Performance: Pathfinding < 100ms on 100×100 grid.
        
        Scalability: Handles larger maps without lag.
        
        Usability: Simple controls, clear feedback.
        
        Cross-Platform: PC (Unity build), extendable to mobile.
        
        Robustness: Robot never stuck in walls.
        
        Extensibility: Easy to add new robots, obstacles, or navigation logic.

=> Technical Requirements

        Engine: Unity 2021+
        
        Language: C#
        
        Pathfinding: A* Algorithm (grid-based)
        
        Physics: Unity Physics (collision + obstacle detection)
        
        Camera: Smooth follow with Lerp transitions
        
        Assets:
        
        2D sprites (tiles, robot, walls)
        
        3D prefabs (robot, walls, doors, furniture)

=> System Components

        GridManager → Creates/updates navigation grid.
        
        PathfindingManager → Runs A*, returns waypoints.
        
        RobotController → Moves robot along path.
        
        CameraController → Handles overhead & follow modes.
        
        ObstacleManager → Updates grid for static/dynamic obstacles.

=> Example Workflow

        User opens simulation (overhead camera).
        
        User clicks target location.
        
        Marker placed → Robot begins moving.
        
        Camera switches to follow mode.
        
        Robot avoids obstacles & reaches destination.
        
        Camera returns to overhead.


=> Future Enhancements

        Multi-robot coordination.
          
        Path smoothing (Bezier curves).
          
        ML-based navigation (alternative to A*).
          
        VR/AR support.
          
        Custom map editor.
